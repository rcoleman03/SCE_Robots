using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using System.Net;
using System.IO.Compression;
using ICSharpCode.SharpZipLib;
using ICSharpCode.SharpZipLib.Core;
using ICSharpCode.SharpZipLib.Zip;



namespace Dynamic.Script_8D654591CD4B967
{
	// Script generated by Pega Robotics Studio 8.0.1072.0
	// Please use caution when modifying class name, namespace or attributes
	[OpenSpan.TypeManagement.DynamicTypeAttribute()]
	[OpenSpan.Design.ComponentIdentityAttribute("Script-8D654591CD4B967")]
	public sealed class Script
	{
		public void URL_Download(string url, string localPath)
		{
			using (var client = new WebClient())
			{
				client.DownloadFile(url, localPath);
			}
		}

		public string GetReferenceDataValue(string filePath, string recordName)
		{
			XElement records = XElement.Load(filePath);
			XElement myRecord = records.Element(recordName);
			return myRecord.Value;
		}

		
		public void _CompressFolder(string path, ZipOutputStream zipStream, int folderOffset, string zipFileName)
		{
			string[] files = Directory.GetFiles(path);

			foreach (string filename in files)
			{
				if(filename != zipFileName)
				{
					FileInfo fi = new FileInfo(filename);
					string entryName = filename.Substring(folderOffset); // Makes the name in zip based on the folder
					entryName = ZipEntry.CleanName(entryName); // Removes drive from name and fixes slash direction
					ZipEntry newEntry = new ZipEntry(entryName);
					newEntry.DateTime = fi.LastWriteTime; // Note the zip format stores 2 second granularity
	
					// Specifying the AESKeySize triggers AES encryption. Allowable values are 0 (off), 128 or 256.
					// A password on the ZipOutputStream is required if using AES.
					//   newEntry.AESKeySize = 256;
	
					// To permit the zip to be unpacked by built-in extractor in WinXP and Server2003, WinZip 8, Java, and other older code,
					// you need to do one of the following: Specify UseZip64.Off, or set the Size.
					// If the file may be bigger than 4GB, or you do not need WinXP built-in compatibility, you do not need either,
					// but the zip will be in Zip64 format which not all utilities can understand.
					//   zipStream.UseZip64 = UseZip64.Off;
					newEntry.Size = fi.Length;
	
					zipStream.PutNextEntry(newEntry);
	
					// Zip the file in buffered chunks
					// the "using" will close the stream even if an exception occurs
					byte[ ] buffer = new byte[4096];
					using (FileStream streamReader = File.OpenRead(filename))
					{ StreamUtils.Copy(streamReader, zipStream, buffer); }
					zipStream.CloseEntry();
				}
			}
			string[] folders = Directory.GetDirectories(path);
			foreach (string folder in folders)
			{ _CompressFolder(folder, zipStream, folderOffset,zipFileName); }

		}

		public void UnzipFile(string zipFileName, string targetDir)
		{
		
			string script = "Unzip";
			try
			{
				OpenSpan.Diagnostics.Diagnostic.TraceVerbose("Script",string.Format("(0) ExecutionLink started", script));
				FastZip fastZip = new FastZip();
				string fileFilter = null;
				fastZip.ExtractZip(zipFileName,targetDir, fileFilter);
			}
			catch(Exception ex)
			{
				OpenSpan.Diagnostics.Diagnostic.PublishException(ex,null);
			}
			finally
			{
				OpenSpan.Diagnostics.Diagnostic.TraceVerbose("Script",string.Format("(0) ExecutionLink completed", script));
			}
		}

		public void UnzipFilePassword(string archiveFilenameIn, string password, string outFolder)
		{
		
			ZipFile zf = null;
			try {
				FileStream fs = File.OpenRead(archiveFilenameIn);
				zf = new ZipFile(fs);
				if (!String.IsNullOrEmpty(password)) {
					zf.Password = password;     // AES encrypted entries are handled automatically
				}
				foreach (ZipEntry zipEntry in zf) {
					if (!zipEntry.IsFile) {
						continue;           // Ignore directories
					}
					String entryFileName = zipEntry.Name;
					// to remove the folder from the entry:- entryFileName = Path.GetFileName(entryFileName);
					// Optionally match entrynames against a selection list here to skip as desired.
					// The unpacked length is available in the zipEntry.Size property.

					byte[] buffer = new byte[4096];     // 4K is optimum
					Stream zipStream = zf.GetInputStream(zipEntry);

					// Manipulate the output filename here as desired.
					String fullZipToPath = Path.Combine(outFolder, entryFileName);
					string directoryName = Path.GetDirectoryName(fullZipToPath);
					if (directoryName.Length > 0)
						Directory.CreateDirectory(directoryName);

					// Unzip file in buffered chunks. This is just as fast as unpacking to a buffer the full size
					// of the file, but does not waste memory.
					// The "using" will close the stream even if an exception occurs.
					using (FileStream streamWriter = File.Create(fullZipToPath)) {
						StreamUtils.Copy(zipStream, streamWriter, buffer);
					}
				}
			} finally {
				if (zf != null) {
					zf.IsStreamOwner = true; // Makes close also shut the underlying stream
					zf.Close(); // Ensure we release resources
				}
			}
		}

		public void ZipFile(string zipFileName, string password, string folderToZip)
		{
			string script = "Zip";
			try
			{
				OpenSpan.Diagnostics.Diagnostic.TraceVerbose("Script",string.Format("(0) ExecutionLink started", script));

				FileStream fsOut = File.Create(zipFileName);
				ZipOutputStream zipStream = new ZipOutputStream(fsOut);
	
				zipStream.SetLevel(3); //0-9, 9 being the highest level of compression
	
				zipStream.Password = password;  // optional. Null is the same as not setting. Required if using AES.
	
				// This setting will strip the leading part of the folder path in the entries, to
				// make the entries relative to the starting folder.
				// To include the full path for each entry up to the drive root, assign folderOffset = 0.
				int folderOffset = folderToZip.Length + (folderToZip.EndsWith("\\") ? 0 : 1);
	
				_CompressFolder(folderToZip, zipStream, folderOffset, zipFileName);
	
				zipStream.IsStreamOwner = true; // Makes the Close also Close the underlying stream
				zipStream.Close();
			}
			catch(Exception ex)
			{
				OpenSpan.Diagnostics.Diagnostic.PublishException(ex,null);
			}
			finally
			{
				OpenSpan.Diagnostics.Diagnostic.TraceVerbose("Script",string.Format("(0) ExecutionLink completed", script));
			}

		}
	}
}
